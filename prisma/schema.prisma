generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  username      String        @unique
  email         String?       @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  vocabularies  Vocabulary[]
  studySessions StudySession[]
}

model Word {
  id            String        @id @default(cuid())
  word          String        @unique
  pronunciation String?
  definitions   Definition[]
  examples      Example[]
  vocabularies  Vocabulary[]
  createdAt     DateTime      @default(now())
  
  @@index([word])
}

model Definition {
  id            String        @id @default(cuid())
  wordId        String
  word          Word          @relation(fields: [wordId], references: [id], onDelete: Cascade)
  partOfSpeech  String?       // noun, verb, adjective, etc.
  meaning       String
  translation   String?       // Korean translation if needed
  order         Int           @default(0)
  
  @@index([wordId])
}

model Example {
  id            String        @id @default(cuid())
  wordId        String
  word          Word          @relation(fields: [wordId], references: [id], onDelete: Cascade)
  sentence      String
  translation   String?
  
  @@index([wordId])
}

model Vocabulary {
  id            String        @id @default(cuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  wordId        String
  word          Word          @relation(fields: [wordId], references: [id], onDelete: Cascade)
  
  level         Int           @default(0) // 0: new, 1-5: familiarity level
  reviewCount   Int           @default(0)
  correctCount  Int           @default(0)
  lastReviewed  DateTime?
  nextReview    DateTime?
  notes         String?
  tags          String[]      @default([])
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  @@unique([userId, wordId])
  @@index([userId])
  @@index([nextReview])
}

model StudySession {
  id            String        @id @default(cuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  startedAt     DateTime      @default(now())
  endedAt       DateTime?
  wordsStudied  Int           @default(0)
  correctAnswers Int          @default(0)
  sessionType   String        // "review", "learn", "quiz"
  
  @@index([userId])
}